1) <?php
   $capital=67;
   print("Variable capital is $capital");
   print("Variable CaPiTaL is $capital");
?>
output:
Variable capital is 67Variable CaPiTaL is 67


2)<html>
<head>
    <title>Division Table</title>
</head>
<body>
    <h2>Division Table</h2>
    <table border="2" cellpadding="8">
        <?php
        // Print header row
        echo "<tr><td></td>";
        for ($col = 1; $col <= 3; $col++) {
            echo "<td><b>$col</b></td>";
        }
        echo "</tr>";

        // Print the division table
        for ($row = 1; $row <= 3; $row++) {
            echo "<tr>";
            echo "<td><b>$row</b></td>"; // row header
            for ($col = 1; $col <= 3; $col++) {
                $result = $row / $col;
                echo "<td>" . round($result, 2) . "</td>"; // round to 2 decimal places
            }
            echo "</tr>";
        }
        ?>
    </table>
</body>
</html>
Output:
Division Table

 1 2 3 
1 1 0.5 0.33 
2 2 1 0.67 
3 3 1.5 1 

3)<html>
<head>
    <title>My Portfolio</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
         }

        header {
            background-color: #4CAF50;
            color: white;
            text-align: center;
            padding: 20px;
        }

        nav {
            background-color: #333;
        }

        nav ul {
            list-style-type: none;
            margin: 0;
            padding: 10px;
            display: flex;
            justify-content: center;
        }

        nav ul li {
            margin: 0 15px;
        }

        nav ul li a {
            color: white;
            text-decoration: none;
        }

        main {
            padding: 20px;
        }

        .project {
            background-color: #f2f2f2;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
        }

        footer {
            background-color: #4CAF50;
            color: white;
            text-align: center;
            padding: 10px;
        }
    </style>
</head>
<body>

    <!-- Header -->
    <header>
        <h1>My Portfolio</h1>
        <p>Welcome to my personal website!</p>
    </header>

    <!-- Navigation -->
    <nav>
        <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">Projects</a></li>
            <li><a href="#">About</a></li>
            <li><a href="#">Contact</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main>
        <h2>My Projects</h2>
        <div class="project">
            <h3>Project 1</h3>
            <p>This is a description of my first project.</p>
        </div>
        <div class="project">
            <h3>Project 2</h3>
            <p>This is a description of my second project.</p>
        </div>
    </main>

    <!-- Footer -->
    <footer>
        <p>&copy; 2025 My Portfolio. All rights reserved.</p>
    </footer>

</body>
</html>

4)<?php 
$animal="antelope";$animal_heads=1;$animal_legs=4;
echo"The $animal has $animal_heads head(s)?.";
echo"The $animal has $animal_legs leg(s).";
?>
Output:
The antelope has 1 head(s)?.The antelope has 4 leg(s).

5)<html>
<head>
<title>Purchase Cost Calculator</title>
</head>
<body>
<h2>Purchase Cost Calculator</h2>

<form method="post" action="">
<h3>Item 1</h3>
Price: <input type="number" name="price1" step="0.01" required><br>
Quantity: <input type="number" name="qty1" required><br>

<h3>Item 2</h3>
Price: <input type="number" name="price2" step="0.01" required><br>
Quantity: <input type="number" name="qty2" required><br>

<h3>Item 3</h3>
Price: <input type="number" name="price3" step="0.01" required><br>
Quantity: <input type="number" name="qty3" required><br><br>

<input type="submit" name="calculate" value="Calculate Total">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['calculate'])) {
    $price1 = (float)$_POST['price1'];
    $qty1 = (int)$_POST['qty1'];
    $price2 = (float)$_POST['price2'];
    $qty2 = (int)$_POST['qty2'];
    $price3 = (float)$_POST['price3'];
    $qty3 = (int)$_POST['qty3'];
    
    
    $subtotal = ($price1 * $qty1) + ($price2 * $qty2) + ($price3 * $qty3);
    $tax = $subtotal * 0.10;
    $total = $subtotal + $tax;
    
    
    echo "<h3>Results:</h3>";
    echo "Subtotal: ₹" . number_format($subtotal, 2) . "<br>";
    echo "Tax (10%): ₹" . number_format($tax, 2) . "<br>";
    echo "<strong>Total Cost: ₹" . number_format($total, 2) . "</strong>";
}
?>
</body>
</html>

6)<?php
session_start();
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $_SESSION['user'] = $_POST['name'];
    setcookie('user', $_POST['name'], time() + 3600);
}
?>

<html>
<head><title>PHP Info Passing</title></head>
<body>

<h2>GET Method</h2>
<form method="get">
    Name: <input type="text" name="get_name">
    <input type="submit" value="GET">
</form>
<?php if (isset($_GET['get_name'])) echo "GET: Hello, " . $_GET['get_name']; ?>

<h2>POST + SESSION + COOKIE</h2>
<form method="post">
    Name: <input type="text" name="name">
    <input type="submit" value="POST">
</form>
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") echo "POST: Hello, " . $_POST['name'];
if (isset($_SESSION['user'])) echo "<br>SESSION: " . $_SESSION['user'];
if (isset($_COOKIE['user'])) echo "<br>COOKIE: " . $_COOKIE['user'];
?>

</body>
</html>


7)<?php
$name = "";
$error = "";
$greeting = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty(trim($_POST["name"]))) {
        $error = "Error: Name field cannot be empty.";
    } else {
        $name = htmlspecialchars(trim($_POST["name"]));
        $greeting = "Hello $name, Welcome to Everyone!<br>Have a nice day!!";
    }
}
?>
<html>
<head>
    <title>Greeting Form</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        .error {
            color: red;
        }
        .greeting {
            color: green;
            font-weight: bold;
        }
    </style>
</head>
<body>
<h2>Enter Your Name</h2>
<form method="post" action="">
    Name: <input type="text" name="name" value="<?php echo $name; ?>">
    <input type="submit" value="Submit">
</form>
<br>
<?php
if ($error) {
    echo "<p class='error'>$error</p>";
}
if ($greeting) {
    echo "<p class='greeting'>$greeting</p>";
}
?>
</body>
</html>

8)<?php
function deal($costA, $sizeA, $costB, $sizeB) {
    $costPerUnitA = $costA / $sizeA;
    $costPerUnitB = $costB / $sizeB;

    echo "Drink A: ₹$costA for $sizeA units (₹" . round($costPerUnitA, 2) . " per unit)<br>";
    echo "Drink B: ₹$costB for $sizeB units (₹" . round($costPerUnitB, 2) . " per unit)<br><br>";

    if ($costPerUnitA < $costPerUnitB) {
        echo "=> Choose Drink A to save money.";
    } elseif ($costPerUnitB < $costPerUnitA) {
        echo "=> Choose Drink B to save money.";
    } else {
        echo "=> Both drinks offer the same value.";
    }
}
deal(25, 11, 23, 9);
?>

9)<?php
$my_var = "this";         
$that = "that";
$the_other = 2.2;
$not_set = "";            

print("$my_var,$not_set,{$that}+{$the_other}");
?>
Output:
this,,that+2.2

10)<?php
$marks = 90;
echo "Student Marks: $marks%<br>";
if ($marks >= 75) {
    echo "Grade: First Class";
} elseif ($marks >= 60 && $marks <= 74) {
    echo "Grade: Second Class";
} elseif ($marks >= 40 && $marks <= 59) {
    echo "Grade: Third Class";
} else {
    echo "Grade: Fail";
}
?>
Output
Student Marks: 90%
Grade: First Class

11)<?php
$dayNumber = date("w");
switch ($dayNumber) {
    case 0:
        echo "Today is Sunday";
        break;
    case 1:
        echo "Today is Monday";
        break;
    case 2:
        echo "Today is Tuesday";
        break;
    case 3:
        echo "Today is Wednesday";
        break;
    case 4:
        echo "Today is Thursday";
        break;
    case 5:
        echo "Today is Friday";
        break;
    case 6:
        echo "Today is Saturday";
        break;
    default:
        echo "Invalid day";
}
?>
Output:
Today is Friday 

12)<?php
$sub = substr((string)12345, 2, 2);
echo "sub is $sub";
?>
Output:
sub is 34

13)Sum of the digits
<?php
$number = 9876;
$sum = 0;
$temp = $number;
while ($number > 0) {
    $digit = $number % 10;     
    $sum += $digit;            
    $number = (int)($number / 10); 
}
echo "Sum of digits of $temp is: $sum";
?>
Output:
Sum of digits of 9876 is: 30

14)<?php
function addNumbers($num1, $num2) {
    return $num1 + $num2;
}
$result = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $number1 = $_POST['number1'];
    $number2 = $_POST['number2'];
    $result = addNumbers($number1, $number2);
}
?>
<html>
<head>
    <title>Sum of Two Numbers</title>
</head>
<body>

<h2>Add Two Numbers</h2>
<form method="post">
    Number 1: <input type="number" name="number1" required><br><br>
    Number 2: <input type="number" name="number2" required><br><br>
    <input type="submit" value="Add">
</form>

<?php
if ($result !== "") {
    echo "<h3>Result: $result</h3>";
}
?>

</body>
</html>

15)
<?php
$text = "PHP is easy to learn. PHP is powerful. I love PHP!";

$word = "PHP";

$count = substr_count($text, $word);

echo "The word '$word' occurs $count times in the given string.";
?>

Output:

The word 'PHP' occurs 3 times in the given string. 

16)
17)<?php
$balance = 5000; 
function deposit($amount, &$balance) {
    if ($amount > 0) {
        $balance += $amount;
        echo "Deposited: ₹$amount <br>";
    } else {
        echo "Invalid deposit amount.<br>";
    }
}
function withdraw($amount, &$balance) {
    if ($amount > 0) {
        if ($amount <= $balance) {
            $balance -= $amount;
            echo "Withdrawn: ₹$amount <br>";
        } else {
            echo "Insufficient balance.<br>";
        }
    } else {
        echo "Invalid withdrawal amount.<br>";
    }
}
echo "<h2>Bank Transactions</h2>";
echo "Opening Balance: ₹$balance <br><br>";
deposit(2000, $balance);
withdraw(1000, $balance);
?>
Output:
Bank Transactions
Opening Balance: ₹5000 

Deposited: ₹2000 
Withdrawn: ₹1000 

18)<?php
$name = "John";
if (isset($name)) {
    echo "The variable \$name is set and not NULL.<br>";
} else {
    echo "The variable \$name is not set or is NULL.<br>";
}
$age = NULL;
if (isset($age)) {
    echo "The variable \$age is set.<br>";
} else {
    echo "The variable \$age is not set or is NULL.<br>";
}
$city = "New York";
if (isset($name, $city)) {
    echo "Both \$name and \$city are set.<br>";
} else {
    echo "One or more variables are not set.<br>";
}
?>
Output:
The variable $name is set and not NULL.
The variable $age is not set or is NULL.
Both $name and $city are set.

19)<?php
function findHighLow($numbers) {
    $highest = max($numbers);
    $lowest = min($numbers);

    return array("highest" => $highest, "lowest" => $lowest);
}
$result = null;
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    $numbers = explode(",", $_POST['numbers']);

    $numbers = array_map('intval', $numbers);

    $result = findHighLow($numbers);
}
?>
<html>
<head>
    <title>Highest and Lowest Finder</title>
</head>
<body>

<h2>Find Highest & Lowest Number</h2>
<form method="post">
    Enter numbers (comma separated): 
    <input type="text" name="numbers" placeholder="e.g. 10, 20, 5, 30" required>
    <br><br>
    <input type="submit" value="Find">
</form>

<?php
if ($result) {
    echo "<h3>Highest Value: " . $result['highest'] . "</h3>";
    echo "<h3>Lowest Value: " . $result['lowest'] . "</h3>";
}
?>

</body>
</html>

20)<?php
$name = $email = $message = "";
$error = "";
$success = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty($_POST["name"]) || empty($_POST["email"]) || empty($_POST["message"])) {
        $error = "All fields are required!";
    } else {
        $name = $_POST["name"];
        $email = $_POST["email"];
        $message = $_POST["message"];
        $success = "Message sent successfully!";
    }
}
?>
<html>
<head>
    <title>Simple Contact Form</title>
</head>
<body>

<h2>Contact Form</h2>

<?php
if ($error) echo "<p style='color:red;'>$error</p>";
if ($success) echo "<p style='color:green;'>$success</p>";
?>

<form method="post">
    Name: <input type="text" name="name"><br><br>
    Email: <input type="email" name="email"><br><br>
    Message: <textarea name="message"></textarea><br><br>
    <input type="submit" value="Send">
</form>

</body>
</html>

21)<?php
function isLeapYear($year) {
    if (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0)) {
        return true;
    } else {
        return false;
    }
}
$year = 2024;

if (isLeapYear($year)) {
    echo "$year is a Leap Year.";
} else {
    echo "$year is NOT a Leap Year.";
}
?>
Output:
2024 is a Leap Year. 

22)<?php
$text = "PHP is easy to learn. PHP is powerful. I love PHP!";

$word = "PHP";

$count = substr_count($text, $word);

echo "The word '$word' occurs $count times in the given string.";
?>
Output:
The word 'PHP' occurs 3 times in the given string. 

23)<?php
if (isset($_GET['city'])) {
    $city = $_GET['city'];
    echo "Showing weather for: $city<br>";
}
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = $_POST['username'];
    $password = $_POST['password']; // Normally you'd verify this
    echo "Welcome, $username!<br>";
}
?>
<html>
<head>
    <title>GET vs POST Example</title>
</head>
<body>

<h2>Check Weather (GET)</h2>
<form method="get">
    City: <input type="text" name="city" required>
    <input type="submit" value="Check">

24)<?php
$text = "  Hello World from PHP!  ";
echo "Original String: '$text'<br><br>";
echo "Trim: '" . trim($text) . "'<br>";
echo "Lowercase: " . strtolower($text) . "<br>";
echo "Uppercase: " . strtoupper($text) . "<br>";
echo "Length: " . strlen($text) . "<br>";
echo "Word Count: " . str_word_count($text) . "<br>";
echo "Reversed: " . strrev($text) . "<br>";
echo "Replace 'PHP' with 'Programming': " . str_replace("PHP", "Programming", $text) . "<br>";
echo "Position of 'World': " . strpos($text, "World") . "<br>";
echo "Substring (chars 2 to 8): " . substr($text, 2, 7) . "<br>";
echo "Repeat 3 times: " . str_repeat("Hi! ", 3) . "<br>";
echo "Shuffled: " . str_shuffle($text) . "<br>";
echo "Compare 'apple' & 'banana': " . strcmp("apple", "banana") . "<br>";
echo "Add Slashes: " . addslashes($text) . "<br>";
$html = "<b>Hello</b> <i>World</i>";
echo "Remove HTML tags: " . strip_tags($html) . "<br>";
?>

Output:

Original String: ' Hello World from PHP! '

Trim: 'Hello World from PHP!'
Lowercase: hello world from php! 
Uppercase: HELLO WORLD FROM PHP! 
Length: 25
Word Count: 4
Reversed: !PHP morf dlroW olleH 
Replace 'PHP' with 'Programming': Hello World from Programming! 
Position of 'World': 8
Substring (chars 2 to 8): Hello W
Repeat 3 times: Hi! Hi! Hi! 
Shuffled: mlH l Hfr oeldo o WP!Pr
Compare 'apple' & 'banana': -1
Add Slashes: Hello World from PHP! 
Remove HTML tags: Hello World

25)<?php
$text = "The Thing will come to you soon";
$newText = preg_replace('/the/i', 'best', $text, 1);

echo "Original: $text<br>";
echo "Modified: $newText";
?>

Output:

Original: The Thing will come to you soon
Modified: best Thing will come to you soon

26)<html>
<head>
    <title>PHP Chess Board</title>
    <style>
        table {
            border: 2px solid black;
            border-collapse: collapse;
        }
        td {
            width: 60px;
            height: 60px;
        }
    </style>
</head>
<body>

<h2>Chess Board in PHP</h2>

<?php
echo "<table>";
for ($row = 1; $row <= 8; $row++) {
    echo "<tr>";
    for ($col = 1; $col <= 8; $col++) {
        // Alternate colors
        if (($row + $col) % 2 == 0) {
            echo "<td style='background-color: white;'></td>";
        } else {
            echo "<td style='background-color: black;'></td>";
        }
    }
    echo "</tr>";
}
echo "</table>";
?>

</body>
</html>

27)<?php
$a = 15;
$b = 4;

echo "a = $a, b = $b<br><br>";

echo "Addition (+): " . ($a + $b) . "<br>";        
echo "Subtraction (-): " . ($a - $b) . "<br>";    
echo "Multiplication (*): " . ($a * $b) . "<br>"; 
echo "Division (/): " . ($a / $b) . "<br>";       
echo "Modulus (%): " . ($a % $b) . "<br>";        
echo "Exponentiation (**): " . ($a ** $b) . "<br>"; 
?>

Output:
a = 15, b = 4

Addition (+): 19
Subtraction (-): 11
Multiplication (*): 60
Division (/): 3.75
Modulus (%): 3
Exponentiation (**): 50625

28)<?php
$a = 10;
$b = "10";
$c = 20;
echo "Check if \$a == \$b: ";
var_dump($a == $b);
echo "Check if \$a === \$b: ";
var_dump($a === $b);
echo "Check if \$a == \$b && \$b == \$c: ";
var_dump($a == $b && $b == $c); 
echo "Check if \$a === \$b && \$b === \$c: ";
var_dump($a === $b && $b === $c);
?>

Output:
Check if $a == $b: bool(true) 
Check if $a === $b: bool(false)
Check if $a == $b && $b == $c: bool(false)
Check if $a === $b && $b === $c: bool(false) 

29)<?php
// 1. rand() - Random number
echo "<h3>rand() Example:</h3>";
echo "Random number: " . rand() . "<br>";
echo "Random number between 1 and 10: " . rand(1, 10) . "<br><br>";

// 2. abs() - Absolute value
echo "<h3>abs() Example:</h3>";
echo "Absolute of -15: " . abs(-15) . "<br>";
echo "Absolute of 7: " . abs(7) . "<br><br>";

// 3. str_replace() - Replace text
echo "<h3>str_replace() Example:</h3>";
$text = "I like apples";
echo "Before: $text<br>";
echo "After: " . str_replace("apples", "oranges", $text) . "<br><br>";

// 4. pi() - Value of Pi
echo "<h3>pi() Example:</h3>";
echo "Value of pi: " . pi() . "<br><br>";

// 5. ceil() - Round up
echo "<h3>ceil() Example:</h3>";
echo "ceil(4.3): " . ceil(4.3) . "<br>";
echo "ceil(9.1): " . ceil(9.1) . "<br>";
?>
Output:
rand() Example:
Random number: 818021494
Random number between 1 and 10: 9


abs() Example:
Absolute of -15: 15
Absolute of 7: 7


str_replace() Example:
Before: I like apples
After: I like oranges


pi() Example:
Value of pi: 3.1415926535898


ceil() Example:
ceil(4.3): 5
ceil(9.1): 10

30)<?php
function generatePassword($length = 10) {
    
    $characters = 'abc+-/123';
    
    $password = '';
    $maxIndex = strlen($characters) - 1;


    for ($i = 0; $i < $length; $i++) {
        $randomIndex = rand(0, $maxIndex);
        $password .= $characters[$randomIndex];
    }

    return $password;
}

echo "Random Password: " . generatePassword(12); 
?>
Output:
Random Password: /a2+/+3//cb+


ASSIGNMENT-2

31)<?php
$fruits = array("Apple", "Banana", "Mango", "Orange");
array_shift($fruits);
print_r($fruits);
?>

OUTPUT:
Array
(
    [0] => Banana
    [1] => Mango
    [2] => Orange
)

32)
A)<?php
$mail = "admin@example.com";
$mail = str_replace("a","@",$mail);
echo "Contact me at $mail.";
?>
OUTPUT:
Contact me at @dmin@ex@mple.com.

B)<?php
$names = array("alex", "jean", "emily", "jane");
$name = preg_grep("/^e/", $names);
print_r($name);
?>

OUTPUT:
Array
(
    [2] => emily
)

33)<?php
$matrix = array(
    array(1, 2, 3),   
    array(4, 5, 6),     
    array(7, 8, 9)    
);
$value = $matrix[1][2];  

echo "The value in the second row and third column is: $value";
?>

OUTPUT:
The value in the second row and third column is: 6

34)<?php
$text = "PHP is fun. Learning PHP can be very interesting. I love PHP!";
$search = "/\bPHP\b/";
$replace = "Java";

// Replace all occurrences
$result = preg_replace($search, $replace, $text);

// Display output
echo "Original Text: $text<br>";
echo "Modified Text: $result";
?>
OUTPUT:
Original Text: PHP is fun. Learning PHP can be very interesting. I love PHP!<br>Modified Text: Java is fun. Learning Java can be very interesting. I love Java!

35)<?php
$mainString = "PHP is a powerful scripting language for web development.";
$searchWords = array("PHP", "Java", "web", "python");
foreach ($searchWords as $word) {
    if (strpos($mainString, $word) !== false) {
        echo "The string contains '$word'.<br>";
    } else {
        echo "The string does NOT contain '$word'.<br>";
    }
}
?>
OUTPUT:
The string contains 'PHP'.<br>The string does NOT contain 'Java'.<br>The string contains 'web'.<br>The string does NOT contain 'python'.<br>

36)<?php
$Vegetable= array("Apple", "Banana", "Carrot", "Orange", "Grapes");
echo "The odd one is : " . $Vegetable[2];
?>
OUTPUT:
The odd one is : Carrot

37)PUSH:
<?php
$fruits = array("Apple", "Banana");
array_push($fruits, "Mango", "Orange");

print_r($fruits);
?>

OUTPUT:
Array
(
    [0] => Apple
    [1] => Banana
    [2] => Mango
    [3] => Orange
)
POP:
<?php
$fruits = array("Apple", "Banana", "Mango");
$lastFruit = array_pop($fruits);

echo "Removed: $lastFruit<br>";
print_r($fruits);
?>
OUTPUT:
Removed: Mango<br>Array
(
    [0] => Apple
    [1] => Banana
)

38)<?php
// Step 1: Create an array
$fruits = array("Apple", "Banana", "Mango", "Orange");

// Step 2: Initialize counter
$i = 0;

// Step 3: Find array length
$length = count($fruits);

// Step 4: Iterate using while loop
while ($i < $length) {
    echo "Fruit at index $i: " . $fruits[$i] . "<br>";
    // Step 6: Increment counter
    $i++;
}
?>
OUTPUT:
Fruit at index 0: Apple<br>Fruit at index 1: Banana<br>Fruit at index 2: Mango<br>Fruit at index 3: Orange<br>

39)<?php
// Step 1: Input student data (Name => Score)
$students = array(
    "Alice" => 85,
    "Bob" => 72,
    "Charlie" => 90,
    "David" => 65,
    "Eva" => 50
);

// Step 2: Function to calculate grade
function getGrade($score) {
    if ($score >= 90) return "A";
    elseif ($score >= 80) return "B";
    elseif ($score >= 70) return "C";
    elseif ($score >= 60) return "D";
    else return "F";
}

// Step 3: Generate summary report
echo "<h3>Student Grade Report</h3>";
foreach ($students as $name => $score) {
    $grade = getGrade($score);
    echo "$name - Score: $score - Grade: $grade <br>";
}

// Step 4: Calculate statistics
$totalStudents = count($students);
$totalScore = array_sum($students);
$average = $totalScore / $totalStudents;
$highest = max($students);
$lowest = min($students);

// Find topper(s)
$topper = array_keys($students, $highest);

echo "<h3>Summary</h3>";
echo "Total Students: $totalStudents <br>";
echo "Average Score: $average <br>";
echo "Highest Score: $highest (Topper: " . implode(", ", $topper) . ")<br>";
echo "Lowest Score: $lowest <br>";
?>
OUTPUT:
Student Grade Report
Alice - Score: 85 - Grade: B 
Bob - Score: 72 - Grade: C 
Charlie - Score: 90 - Grade: A 
David - Score: 65 - Grade: D 
Eva - Score: 50 - Grade: F 

Summary
Total Students: 5 
Average Score: 72.4 
Highest Score: 90 (Topper: Charlie)
Lowest Score: 50 


40)<?php
// Input string
$text = "Hello@123!! Welcome_to PHP#World 2025.";

// Step 1: Split string into characters
$chars = str_split($text);

// Step 2: Filter characters (keep only a-z, A-Z, 0-9, and space)
$filtered = array_filter($chars, function($ch) {
    return preg_match('/[a-zA-Z0-9 ]/', $ch);
});

// Step 3: Join back into a string
$cleanString = implode("", $filtered);

// Output
echo "Original String: $text <br>";
echo "Cleaned String: $cleanString";
?>

OUTPUT:
Original String: Hello@123!! Welcome_to PHP#World 2025.
Cleaned String: Hello123 Welcometo PHPWorld 2025

41)<?php
$text = "Contact us at support@example.com, sales@shop.org or admin123@test.co.in for details.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/";
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
echo "Extracted Email Addresses:<br>";
foreach ($emails as $email) {
    echo $email . "<br>";
}
?>
OUTPUT:
Extracted Email Addresses:
support@example.com
sales@shop.org
admin123@test.co.in

42)<?php
// Given arrays
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);

// Step 1: Merge all arrays into one
$allMarks = array_merge($marks1, $marks2, $marks3);

// Step 2: Find maximum and minimum
$maxMark = max($allMarks);
$minMark = min($allMarks);

// Step 3: Display results
echo "Maximum Mark: $maxMark <br>";
echo "Minimum Mark: $minMark <br>";
?>

OUTPUT:
Maximum Mark: 635 <br>Minimum Mark: 111 <br>

43)<?php
$passwords = ["Test@123", "weakpass", "NoSpecial123", "StrongPass1$", "Short1!"];

$pattern = "/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/";

foreach ($passwords as $pwd) {
    if (preg_match($pattern, $pwd)) {
        echo "Password '$pwd' is VALID <br>";
    } else {
        echo "Password '$pwd' is INVALID <br>";
    }
}
?>
OUTPUT:
Password 'Test@123' is VALID <br>Password 'weakpass' is INVALID <br>Password 'NoSpecial123' is INVALID <br>Password 'StrongPass1$' is VALID <br>Password 'Short1!' is INVALID <br>

44)<?php
// Songs list
$songs = array("Shape of You", "Blinding Lights", "Believer", "Levitating");

// Playlist (empty at first)
$playlist = array();

// Add songs to playlist
array_push($playlist, $songs[0], $songs[2], $songs[3]);

// Show playlist
echo "<h3>My Playlist</h3>";
foreach ($playlist as $song) {
    echo $song . "<br>";
}

// Remove a song ("Believer")
$key = array_search("Believer", $playlist);
if ($key !== false) {
    unset($playlist[$key]);
}

// Playlist summary
echo "<h3>Summary</h3>";
echo "Total Songs: " . count($playlist);
?>
OUTPUT:
My Playlist
Shape of You
Believer
Levitating

Summary
Total Songs: 2

45)<?php
// Example multidimensional arrays
$array1 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "Charlie")
);

$array2 = array(
    array("id" => 1, "name" => "Alice"),
    array("id" => 2, "name" => "Bob"),
    array("id" => 3, "name" => "David")
);

// Simple difference
$diff = array_udiff($array1, $array2, function($a, $b) {
    return ($a == $b) ? 0 : 1;
});

// Show result
echo "<pre>";
print_r($diff);
echo "</pre>";
?>
OUTPUT:
Array
(
    [0] => Array
        (
            [id] => 1
            [name] => Alice
        )

    [2] => Array
        (
            [id] => 3
            [name] => Charlie
        )

)

46)<?php
// Array of values
$fruits = array("apple", "banana", "cherry", "mango", "orange");

// Value to search
$search = "mango";

// Use array_search to find index
$index = array_search($search, $fruits);

if ($index !== false) {
    echo "The value '$search' is found at index: $index";
} else {
    echo "The value '$search' is not found in the array.";
}
?>
OUTPUT:
The value 'mango' is found at index: 3

47)<?php
$x = [1, 2, 3, 4, 5];

// delete the element at index 2 (value = 3)
unset($x[2]);

// re-index so keys become 0..n
$x = array_values($x);

// print: 1 2 4 5
echo implode(' ', $x), PHP_EOL;

OUTPUT:
1 2 4 5 

48)<?php
// Array of student names (records)
$students = ["Alex", "Brian", "Catherine", "David", "Emma"];

// Loop through with record numbers
foreach ($students as $recordNo => $name) {
    echo "Record No: " . ($recordNo + 1) . " - Name: $name <br>";
}
?>

OUTPUT:
Record No: 1 - Name: Alex 
Record No: 2 - Name: Brian 
Record No: 3 - Name: Catherine 
Record No: 4 - Name: David 
Record No: 5 - Name: Emma 

49)<?php
// Player stats dataset (could come from DB)
$players = [
    ["name" => "Alice", "points" => 20, "assists" => 5, "rebounds" => 8],
    ["name" => "Bob",   "points" => 15, "assists" => 7, "rebounds" => 10],
    ["name" => "Charlie","points" => 25, "assists" => 4, "rebounds" => 6],
];

// Calculate performance index
foreach ($players as &$player) {
    $player['index'] = ($player['points'] * 0.5) +
                       ($player['assists'] * 0.3) +
                       ($player['rebounds'] * 0.2);
}

// Sort players by index (descending = best first)
usort($players, function($a, $b) {
    return $b['index'] <=> $a['index'];
});

// Calculate average performance index
$totalIndex = array_sum(array_column($players, 'index'));
$avgIndex   = $totalIndex / count($players);

// Print results
echo "Average Performance Index: " . number_format($avgIndex, 2) . "\n\n";

foreach ($players as $rank => $player) {
    echo "Rank " . ($rank + 1) . ": {$player['name']} (Index: " . number_format($player['index'], 2) . ")\n";
}
?>
Output:
Average Performance Index: 13.20 Rank 1: Charlie (Index: 14.90) Rank 2: Alice (Index: 13.10) Rank 3: Bob (Index: 11.60) 

50)
<?php
// Original array
$words = ["Apple", "BaNaNa", "Cherry", "MANGO"];

// Convert all elements to lower-case
$lowercase = array_map('strtolower', $words);

// Convert all elements to upper-case
$uppercase = array_map('strtoupper', $words);

// Print results
echo "Original Array: " . implode(", ", $words) . "<br>";
echo "Lower-case Array: " . implode(", ", $lowercase) . "<br>";
echo "Upper-case Array: " . implode(", ", $uppercase);
?>
OUTPUT:
Original Array: Apple, BaNaNa, Cherry, MANGO
Lower-case Array: apple, banana, cherry, mango
Upper-case Array: APPLE, BANANA, CHERRY, MANGO

51)<?php
$fruits = ["apple", "banana", "cherry"];
$first = array_shift($fruits);

echo "Removed Element: $first\n";
print_r($fruits);
?>
<br>
<?php
$fruits = ["banana", "cherry"];
$count = array_unshift($fruits, "apple", "mango");

echo "New Array Size: $count\n";
print_r($fruits);
?>
OUTPUT:
Removed Element: apple Array ([0] => banana[1] => cherry ) 
 New Array Size: 4 Array ([0] => apple[1] => mango[2] => banana[3] => cherry ) 

52)<?php
// Stack example
$stack = [];

// Push elements
array_push($stack, "A");
array_push($stack, "B");
array_push($stack, "C");

echo "Stack after pushes: ";
print_r($stack);

// Pop elements (LIFO)
$last = array_pop($stack);
echo "Popped: $last\n";

echo "Stack after pop: ";
print_r($stack);
?>
<br>
<?php
// Queue example
$queue = [];

// Enqueue elements
array_push($queue, "A");
array_push($queue, "B");
array_push($queue, "C");

echo "Queue after enqueues: ";
print_r($queue);

// Dequeue element (FIFO)
$first = array_shift($queue);
echo "Dequeued: $first\n";

echo "Queue after dequeue: ";
print_r($queue);
?>
OUTPUT:
Stack after pushes: Array ([0] => A[1] => B[2] => C ) Popped: C Stack after pop: Array ([0] => A[1] => B ) 
 Queue after enqueues: Array ([0] => A[1] => B[2] => C ) Dequeued: A Queue after dequeue: Array ([0] => B[1] => C ) 

53)<?php
// Numeric array
$numbers = [10, 20, 30, 40, 50];

echo "Original Array: ";
print_r($numbers);

// array_pop() → removes LAST element
$last = array_pop($numbers);
echo "\nAfter array_pop():\n";
echo "Removed Element: $last\n";
print_r($numbers);

// Reset array for shift demo
$numbers = [10, 20, 30, 40, 50];

// array_shift() → removes FIRST element
$first = array_shift($numbers);
echo "\nAfter array_shift():\n";
echo "Removed Element: $first\n";
print_r($numbers);
?>
OUTPUT:
Original Array: Array ([0] => 10[1] => 20[2] => 30[3] => 40[4] => 50 ) 
After array_pop(): Removed Element: 50 Array ([0] => 10[1] => 20[2] => 30[3] => 40 ) 
After array_shift(): Removed Element: 10 Array ([0] => 20[1] => 30[2] => 40[3] => 50 ) 

54)<?php
// Initialize an empty queue
$queue = [];

// Customers enter the queue (Enqueue using array_push)
array_push($queue, "Alice");
array_push($queue, "Bob");
array_push($queue, "Charlie");
array_push($queue, "David");

echo "Initial Queue:\n";
print_r($queue);

// Serve first customer (Dequeue using array_shift)
$served = array_shift($queue);
echo "\nCustomer served: $served\n";

echo "Queue after serving one customer:\n";
print_r($queue);

// Add another customer
array_push($queue, "Eve");
echo "\nAfter new customer joins:\n";
print_r($queue);

// Serve two more customers
$served1 = array_shift($queue);
$served2 = array_shift($queue);
echo "\nCustomers served: $served1, $served2\n";

echo "Final Queue:\n";
print_r($queue);
?>
OUTPUT:
Initial Queue: Array ([0] => Alice[1] => Bob[2] => Charlie[3] => David ) 
Customer served: Alice Queue after serving one customer: Array ([0] => Bob[1] => Charlie[2] => David ) 
After new customer joins: Array ([0] => Bob[1] => Charlie[2] => David[3] => Eve ) 
Customers served: Bob, Charlie Final Queue: Array ([0] => David[1] => Eve ) 

55)<?php
// Input string
$string = "HELLO";

// Convert string into array of characters
$chars = str_split($string);

// Initialize an empty stack
$stack = [];

// Push all characters onto the stack
foreach ($chars as $ch) {
    array_push($stack, $ch);
}

// Pop characters from the stack to form reversed string
$reversed = "";
while (!empty($stack)) {
    $reversed .= array_pop($stack);
}

// Print results
echo "Original String: $string\n";
echo "Reversed String: $reversed\n";
?>
OUTPUT:
Original String: HELLO Reversed String: OLLEH 

56)<?php
$fruits = ["banana", "apple", "Mango", "cherry", "Apple"];

// Normal ascending sort
sort($fruits);
print_r($fruits);

// Sort by value while keeping keys
asort($fruits);
print_r($fruits);

// Sort by key
$assoc = ["d"=>3, "a"=>1, "c"=>2];
ksort($assoc);
print_r($assoc);

// Natural order
$files = ["file1.txt", "file10.txt", "file2.txt"];
natsort($files);
print_r($files);
?>
Output:
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([0] => Apple[1] => Mango[2] => apple[3] => banana[4] => cherry ) 
Array ([a] => 1[c] => 2[d] => 3 ) 
Array ([0] => file1.txt[2] => file2.txt[1] => file10.txt ) 

57)<?php
$text = "Alice and Bob went to New York";
preg_match_all("/\b[A-Z][a-zA-Z]*\b/", $text, $matches);
print_r($matches[0]);
?>
OUTPUT:
Array ([0] => Alice[1] => Bob[2] => New[3] => York ) 

58)<?php
// Sample string containing emails
$text = "You can contact us at support@example.com, sales@myshop.org or admin123@test.co.in.";

// Regular expression for email pattern
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,6}/";

// Extract all matches
preg_match_all($pattern, $text, $matches);

// Print result
echo "Extracted Email Addresses:\n";
print_r($matches[0]);
?>
OUTPUT:
Extracted Email Addresses: Array ([0] => support@example.com[1] => sales@myshop.org[2] => admin123@test.co.in ) 

59)<?php
// Function to calculate average of an array
function calculateAverage($numbers) {
    if (count($numbers) === 0) {
        return 0; // Avoid division by zero
    }
    $sum = array_sum($numbers);  // Sum of elements
    $count = count($numbers);    // Number of elements
    return $sum / $count;        // Average
}

// Example usage
$values = [10, 20, 30, 40, 50];
echo "The average is: " . calculateAverage($values);
?>
OUTPUT:
The average is: 30

60)<?php
// Function to search a value in an associative array
function searchValueInAssocArray($array, $searchValue) {
    $result = array_keys($array, $searchValue, true); // strict search
    if (!empty($result)) {
        return $result; // return keys where value found
    } else {
        return null; // value not found
    }
}

// Example usage
$students = [
    "101" => "Alice",
    "102" => "Bob",
    "103" => "Charlie",
    "104" => "Bob"
];

$search = "Bob";
$foundKeys = searchValueInAssocArray($students, $search);

if ($foundKeys !== null) {
    echo "Value '$search' found at keys: " . implode(", ", $foundKeys);
} else {
    echo "Value '$search' not found in the array.";
}
?>
OUTPUT:
Value 'Bob' found at keys: 102, 104

61)<?php
$x = [1, 2, 3, 4, 5];
unset($x[2]);  // deletes element at index 2 (value 3)
print_r($x);
?>
OUTPUT:
Array ([0] => 1[1] => 2[3] => 4[4] => 5 ) 

62)<?php
// Sample values
$values = [1.65, 1.65, -1.54];

// Round each value to 1 decimal place
foreach ($values as $num) {
    echo "Original: $num → Rounded: " . round($num, 1) . "<br>";
}
?>
OUTPUT:
Original: 1.65 → Rounded: 1.7
Original: 1.65 → Rounded: 1.7
Original: -1.54 → Rounded: -1.5

63)<?php
// Function to return sum of even numbers in an array
function sumEvenNumbers($arr) {
    $sum = 0;
    foreach ($arr as $num) {
        if ($num % 2 == 0) {   // Check even number
            $sum += $num;
        }
    }
    return $sum;
}

// Example usage
$numbers = [1, 2, 3, 4, 5, 6, 7, 8];
echo "Sum of even numbers: " . sumEvenNumbers($numbers);
?>
output:
Sum of even numbers: 20

64)<?php
// Historical sales data (e.g., monthly sales in units or revenue)
$sales = [1000, 1200, 1350, 1500, 1600, 1750, 1900];

// Step 1: Calculate growth rates between months
$growthRates = [];
for ($i = 1; $i < count($sales); $i++) {
    $growth = (($sales[$i] - $sales[$i - 1]) / $sales[$i - 1]) * 100; // %
    $growthRates[] = $growth;
}

// Step 2: Calculate average growth rate
$averageGrowthRate = array_sum($growthRates) / count($growthRates);

// Step 3: Forecast next 3 months based on average growth rate
$forecast = [];
$lastSale = end($sales);  // get last known sales
for ($i = 1; $i <= 3; $i++) {
    $lastSale = $lastSale * (1 + $averageGrowthRate / 100);
    $forecast[] = round($lastSale, 2);
}

// Step 4: Display results
echo "<h2>Sales Forecast System</h2>";

echo "<b>Historical Sales Data:</b> " . implode(", ", $sales) . "<br><br>";

echo "<b>Monthly Growth Rates (%):</b> " . implode(", ", array_map(fn($v) => round($v, 2), $growthRates)) . "<br>";
echo "<b>Average Growth Rate:</b> " . round($averageGrowthRate, 2) . "%<br><br>";

echo "<b>Forecasted Sales (Next 3 Months):</b> " . implode(", ", $forecast) . "<br>";
?>
OUTPUT:
Sales Forecast System
Historical Sales Data: 1000, 1200, 1350, 1500, 1600, 1750, 1900

Monthly Growth Rates (%): 20, 12.5, 11.11, 6.67, 9.38, 8.57
Average Growth Rate: 11.37%

Forecasted Sales (Next 3 Months): 2116.04, 2356.65, 2624.62

65)<?php
// Main string
$mainString = "Welcome to PHP programming!";

// Substring to search
$search = "PHP";

// Method 1: Using strpos() (works in all PHP versions)
if (strpos($mainString, $search) !== false) {
    echo "The string contains '$search'.<br>";
} else {
    echo "The string does not contain '$search'.<br>";
}

// Method 2: Using str_contains() (PHP 8+)
if (function_exists('str_contains')) {
    if (str_contains($mainString, $search)) {
        echo "(Using str_contains) The string contains '$search'.";
    } else {
        echo "(Using str_contains) The string does not contain '$search'.";
    }
}
?>
OUTPUT:
The string contains 'PHP'.
(Using str_contains) The string contains 'PHP'.

66)<?php
$fruits = ["apple", "banana", "cherry"];

// Using count()
echo "Using count(): " . count($fruits) . "<br>";

// Using sizeof()
echo "Using sizeof(): " . sizeof($fruits) . "<br>";
?>
OUTPUT:
Using count(): 3
Using sizeof(): 3

67)<?php
// Input sentence
$sentence = "PHP is great, and PHP is powerful. PHP is easy to learn!";

// Step 1: Tokenize the sentence into words using regex
// \W+ matches any non-word character (spaces, punctuation)
$words = preg_split("/\W+/", strtolower($sentence), -1, PREG_SPLIT_NO_EMPTY);

// Step 2: Count occurrences of each word
$wordCount = array_count_values($words);

// Step 3: Display the results
echo "<h3>Word Frequency Count</h3>";
foreach ($wordCount as $word => $count) {
    echo "$word : $count <br>";
}
?>
OUTPUT:
Word Frequency Count
php : 3 
is : 3 
great : 1 
and : 1 
powerful : 1 
easy : 1 
to : 1 
learn : 1 

68)<?php
try {
    $numerator = 10;
    $denominator = 0;
    
    if ($denominator == 0) {
        // Manually throw exception for clarity
        throw new DivisionByZeroError("Cannot divide by zero!");
    }
    
    $result = $numerator / $denominator;
    echo "Result: $result";
    
} catch (DivisionByZeroError $e) {
    echo "Error: " . $e->getMessage();
}
?>
OUTPUT:
Error: Cannot divide by zero!

69)<?php
// Sample array
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');

// Function to convert all values to lowercase
function arrayToLower($arr) {
    return array_map('strtolower', $arr);
}

// Function to convert all values to uppercase
function arrayToUpper($arr) {
    return array_map('strtoupper', $arr);
}

// Convert and display results
echo "Values are in lower case.<br>";
print_r(arrayToLower($Color));

echo "<br><br>Values are in upper case.<br>";
print_r(arrayToUpper($Color));
?>
OUTPUT:
Values are in lower case.
Array ([A] => blue[B] => green[c] => red ) 

Values are in upper case.
Array ([A] => BLUE[B] => GREEN[c] => RED ) 

70)<!DOCTYPE html>
<html>
<head>
    <title>Number Sequence Input</title>
</head>
<body>
    <h2>Enter a sequence of numbers separated by commas</h2>
    
    <form method="post">
        <input type="text" name="numbers" placeholder="e.g. 1,2,3,4,5" required>
        <input type="submit" name="submit" value="Submit">
    </form>

    <?php
    if (isset($_POST['submit'])) {
        // Get the input string
        $input = $_POST['numbers'];

        // Convert string to array using comma as delimiter
        $numberArray = array_map('trim', explode(',', $input));

        // Optional: Convert strings to integers
        $numberArray = array_map('intval', $numberArray);

        // Display the array
        echo "<h3>Your number sequence as an array:</h3>";
        echo "<pre>";
        print_r($numberArray);
        echo "</pre>";
    }
    ?>
</body>
</html>








